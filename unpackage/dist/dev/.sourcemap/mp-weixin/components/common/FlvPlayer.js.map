{"version":3,"file":"FlvPlayer.js","sources":["components/common/FlvPlayer.vue","../../soft/HBuilderX.4.45.2025010502/HBuilderX/plugins/uniapp-cli-vite/uniComponent:/RDovV09SS1BMQUNFL3V1LWNvbXBhbnkvY29tcG9uZW50cy9jb21tb24vRmx2UGxheWVyLnZ1ZQ"],"sourcesContent":["<template>\r\n  <view class=\"flv-player-container\">\r\n    <video \r\n      v-if=\"useNativePlayer\"\r\n      :src=\"src\" \r\n      :autoplay=\"autoplay\"\r\n      :muted=\"muted\"\r\n      :controls=\"controls\"\r\n      class=\"flv-video\"\r\n      @error=\"handleError\"\r\n      @play=\"handlePlay\"\r\n    />\r\n    <!-- #ifdef H5 -->\r\n    <view v-else class=\"flv-video-wrapper\">\r\n      <video \r\n        id=\"flvVideo\"\r\n        class=\"flv-video\"\r\n        :controls=\"controls\"\r\n        :muted=\"muted\"\r\n        :autoplay=\"autoplay\"\r\n        webkit-playsinline=\"true\"\r\n        playsinline=\"true\"\r\n        x5-playsinline=\"true\"\r\n        preload=\"auto\"\r\n      />\r\n      <view v-if=\"error\" class=\"error-overlay\">\r\n        <text class=\"error-icon\">⚠️</text>\r\n        <text class=\"error-text\">{{ error }}</text>\r\n        <button class=\"retry-btn\" @tap=\"retry\">重试</button>\r\n      </view>\r\n      <view v-if=\"loading\" class=\"loading-overlay\">\r\n        <text class=\"loading-icon\">⏳</text>\r\n        <text class=\"loading-text\">加载中...</text>\r\n      </view>\r\n    </view>\r\n    <!-- #endif -->\r\n  </view>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, onBeforeUnmount, watch } from 'vue'\r\nimport flvjs from 'flv.js'\r\n\r\nconst props = defineProps({\r\n  src: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  autoplay: {\r\n    type: Boolean,\r\n    default: true\r\n  },\r\n  muted: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  controls: {\r\n    type: Boolean,\r\n    default: true\r\n  }\r\n})\r\n\r\nconst emit = defineEmits(['error', 'play'])\r\n\r\nconst flvPlayer = ref(null)\r\nconst error = ref('')\r\nconst loading = ref(false)\r\nconst useNativePlayer = ref(false)\r\n\r\n// 判断是否为 FLV 格式\r\nconst isFlv = (url) => {\r\n  return url && (url.includes('.flv') || url.includes('flv'))\r\n}\r\n\r\n// 初始化 FLV 播放器\r\nconst initFlvPlayer = () => {\r\n  // #ifdef H5\r\n  loading.value = true\r\n  error.value = ''\r\n  \r\n  // 检查是否支持 flv.js\r\n  if (!flvjs.isSupported()) {\r\n    error.value = '当前浏览器不支持 FLV 播放'\r\n    useNativePlayer.value = true\r\n    loading.value = false\r\n    emit('error', new Error('FLV not supported'))\r\n    return\r\n  }\r\n\r\n  // 如果不是 FLV 格式，使用原生播放器\r\n  if (!isFlv(props.src)) {\r\n    useNativePlayer.value = true\r\n    loading.value = false\r\n    return\r\n  }\r\n\r\n  try {\r\n   \r\n    // uni-app 的 video 组件会被编译成 uni-video，需要找到内部的真实 video 元素\r\n    let uniVideoEl = document.getElementById('flvVideo')\r\n    \r\n    if (!uniVideoEl) {\r\n      uniVideoEl = document.querySelector('#flvVideo')\r\n    }\r\n    \r\n    // 查找 uni-video 内部的真实 video 元素\r\n    let realVideoEl = null\r\n    \r\n    // 方法1: 查找 uni-video 的子元素中的 video 标签\r\n    if (uniVideoEl) {\r\n      realVideoEl = uniVideoEl.querySelector('video')\r\n     \r\n    }\r\n    \r\n    // 方法2: 查找 Shadow DOM 中的 video（如果使用了 Shadow DOM）\r\n    if (!realVideoEl && uniVideoEl && uniVideoEl.shadowRoot) {\r\n      realVideoEl = uniVideoEl.shadowRoot.querySelector('video')\r\n      \r\n    }\r\n    \r\n    // 方法3: 直接查找页面上的所有原生 video 标签\r\n    if (!realVideoEl) {\r\n      const allVideos = document.querySelectorAll('video')\r\n      console.log('页面上所有 video 元素:', allVideos)\r\n      if (allVideos && allVideos.length > 0) {\r\n        // 找到最后一个，因为它最可能是我们刚创建的\r\n        realVideoEl = allVideos[allVideos.length - 1]\r\n        console.log('使用页面上的 video 元素:', realVideoEl)\r\n      }\r\n    }\r\n    \r\n    // 方法4: 如果还找不到，创建一个原生 video 元素并替换\r\n    if (!realVideoEl || realVideoEl.tagName !== 'VIDEO') {\r\n      console.warn('未找到原生 video 元素，尝试创建一个')\r\n      \r\n      if (uniVideoEl) {\r\n        // 创建原生 video 元素\r\n        realVideoEl = document.createElement('video')\r\n        realVideoEl.id = 'flvVideoNative'\r\n        realVideoEl.className = 'flv-video'\r\n        realVideoEl.controls = props.controls\r\n        realVideoEl.muted = props.muted\r\n        realVideoEl.autoplay = props.autoplay\r\n        realVideoEl.setAttribute('webkit-playsinline', 'true')\r\n        realVideoEl.setAttribute('playsinline', 'true')\r\n        realVideoEl.setAttribute('x5-playsinline', 'true')\r\n        realVideoEl.setAttribute('preload', 'auto')\r\n        realVideoEl.style.width = '100%'\r\n        realVideoEl.style.height = '420px'\r\n        realVideoEl.style.backgroundColor = '#000'\r\n        \r\n        // 将原生 video 插入到 uni-video 内部或替换它\r\n        if (uniVideoEl.firstChild) {\r\n          uniVideoEl.insertBefore(realVideoEl, uniVideoEl.firstChild)\r\n        } else {\r\n          uniVideoEl.appendChild(realVideoEl)\r\n        }\r\n        \r\n        console.log('✓ 已创建并插入原生 video 元素:', realVideoEl)\r\n      } else {\r\n        error.value = '无法初始化播放器'\r\n        loading.value = false\r\n        console.error('未找到 uni-video 容器')\r\n        emit('error', new Error('无法初始化播放器'))\r\n        return\r\n      }\r\n    }\r\n    \r\n    console.log('✓ 找到原生 Video 元素')\r\n    console.log('Video 元素:', realVideoEl)\r\n    console.log('Video 元素标签名:', realVideoEl.tagName)\r\n\r\n    flvPlayer.value = flvjs.createPlayer({\r\n      type: 'flv',\r\n      url: props.src,\r\n      isLive: true,\r\n      hasAudio: true,\r\n      hasVideo: true,\r\n      cors: true\r\n    }, {\r\n      enableWorker: true,\r\n      enableStashBuffer: false,\r\n      stashInitialSize: 128,\r\n      autoCleanupSourceBuffer: true,\r\n      lazyLoad: false,\r\n      lazyLoadMaxDuration: 3 * 60,\r\n      seekType: 'range'\r\n    })\r\n\r\n    // 使用真实的 DOM 元素附加到播放器\r\n    flvPlayer.value.attachMediaElement(realVideoEl)\r\n    flvPlayer.value.load()\r\n    \r\n    console.log('FLV 播放器初始化成功，开始加载流')\r\n    \r\n    // 监听加载完成\r\n    realVideoEl.addEventListener('loadeddata', () => {\r\n      loading.value = false\r\n      console.log('视频数据已加载')\r\n    })\r\n    \r\n    // 监听播放开始\r\n    realVideoEl.addEventListener('playing', () => {\r\n      loading.value = false\r\n      console.log('视频正在播放')\r\n      emit('play')\r\n    })\r\n\r\n    if (props.autoplay) {\r\n      // 延迟自动播放，确保元素已准备好\r\n      setTimeout(() => {\r\n        console.log('尝试自动播放')\r\n        console.log('Video 元素类型:', realVideoEl)\r\n        console.log('是否有 play 方法:', typeof realVideoEl?.play)\r\n        \r\n        if (realVideoEl && typeof realVideoEl.play === 'function') {\r\n          // 使用原生 video 元素的 play 方法\r\n          try {\r\n            const playPromise = realVideoEl.play()\r\n            \r\n            if (playPromise !== undefined) {\r\n              playPromise.then(() => {\r\n                loading.value = false\r\n                console.log('FLV 直播开始播放')\r\n              }).catch(err => {\r\n                console.error('自动播放失败:', err)\r\n                // 如果自动播放失败，尝试静音播放\r\n                realVideoEl.muted = true\r\n                const retryPlay = realVideoEl.play()\r\n                if (retryPlay !== undefined) {\r\n                  retryPlay.then(() => {\r\n                    loading.value = false\r\n                    console.log('静音模式播放成功')\r\n                  }).catch(e => {\r\n                    console.error('静音播放也失败:', e)\r\n                    loading.value = false\r\n                  })\r\n                } else {\r\n                  loading.value = false\r\n                }\r\n              })\r\n            } else {\r\n              loading.value = false\r\n            }\r\n          } catch (e) {\r\n            console.error('调用 play 方法失败:', e)\r\n            loading.value = false\r\n          }\r\n        } else {\r\n          console.warn('无法找到有效的 video 元素或 play 方法，视频可能需要手动播放')\r\n          console.warn('realVideoEl 类型:', typeof realVideoEl, realVideoEl)\r\n          loading.value = false\r\n          // 设置 video 的 autoplay 属性\r\n          if (realVideoEl) {\r\n            try {\r\n              realVideoEl.autoplay = true\r\n              realVideoEl.setAttribute('autoplay', 'true')\r\n              console.log('已设置 autoplay 属性')\r\n            } catch (e) {\r\n              console.error('设置 autoplay 属性失败:', e)\r\n            }\r\n          }\r\n        }\r\n      }, 500)\r\n    } else {\r\n      loading.value = false\r\n    }\r\n\r\n    // 监听 FLV 播放器事件\r\n    flvPlayer.value.on(flvjs.Events.ERROR, (errorType, errorDetail, errorInfo) => {\r\n      console.error('FLV 播放错误:')\r\n      console.error('- 错误类型:', errorType)\r\n      console.error('- 错误详情:', errorDetail)\r\n      console.error('- 错误信息:', errorInfo)\r\n      \r\n      let errorMsg = '播放错误'\r\n      if (errorType === 'NetworkError') {\r\n        errorMsg = '网络错误，无法加载直播流'\r\n      } else if (errorType === 'MediaError') {\r\n        errorMsg = '媒体错误，直播流格式可能不支持'\r\n      } else if (errorType === 'OtherError') {\r\n        errorMsg = '未知错误，请重试'\r\n      }\r\n      \r\n      error.value = errorMsg\r\n      loading.value = false\r\n      emit('error', { errorType, errorDetail, errorInfo })\r\n    })\r\n    \r\n    // 监听统计信息\r\n    flvPlayer.value.on(flvjs.Events.STATISTICS_INFO, (stats) => {\r\n      \r\n    })\r\n    \r\n    // 监听视频错误\r\n    realVideoEl.addEventListener('error', (e) => {\r\n      console.error('Video 元素错误:', e)\r\n      error.value = 'Video 播放错误'\r\n      loading.value = false\r\n    })\r\n\r\n  } catch (err) {\r\n    console.error('FLV 播放器初始化失败:', err)\r\n    error.value = err.message || '播放器初始化失败'\r\n    loading.value = false\r\n    emit('error', err)\r\n  }\r\n  // #endif\r\n}\r\n\r\n// 销毁播放器\r\nconst destroyPlayer = () => {\r\n  // #ifdef H5\r\n  if (flvPlayer.value) {\r\n    try {\r\n      // 先获取 video 元素并暂停\r\n      const videoEl = document.getElementById('flvVideo')\r\n      if (videoEl && !videoEl.paused) {\r\n        videoEl.pause()\r\n      }\r\n      \r\n      // 卸载资源\r\n      if (flvPlayer.value.unload && typeof flvPlayer.value.unload === 'function') {\r\n        flvPlayer.value.unload()\r\n      }\r\n      \r\n      // 分离媒体元素\r\n      if (flvPlayer.value.detachMediaElement && typeof flvPlayer.value.detachMediaElement === 'function') {\r\n        flvPlayer.value.detachMediaElement()\r\n      }\r\n      \r\n      // 销毁播放器\r\n      if (flvPlayer.value.destroy && typeof flvPlayer.value.destroy === 'function') {\r\n        flvPlayer.value.destroy()\r\n      }\r\n      \r\n      console.log('FLV 播放器已销毁')\r\n    } catch (err) {\r\n      console.error('销毁播放器时出错:', err)\r\n    } finally {\r\n      flvPlayer.value = null\r\n    }\r\n  }\r\n  // #endif\r\n}\r\n\r\n// 重试\r\nconst retry = () => {\r\n  error.value = ''\r\n  destroyPlayer()\r\n  initFlvPlayer()\r\n}\r\n\r\n// 处理错误\r\nconst handleError = (e) => {\r\n  error.value = '播放失败'\r\n  emit('error', e)\r\n}\r\n\r\n// 处理播放\r\nconst handlePlay = () => {\r\n  emit('play')\r\n}\r\n\r\n// 监听 src 变化\r\nwatch(() => props.src, (newSrc, oldSrc) => {\r\n  if (newSrc !== oldSrc) {\r\n    destroyPlayer()\r\n    error.value = ''\r\n    \r\n    // #ifdef H5\r\n    if (newSrc) {\r\n      // 延迟初始化，确保销毁完成\r\n      setTimeout(() => {\r\n        if (isFlv(newSrc)) {\r\n          useNativePlayer.value = false\r\n          initFlvPlayer()\r\n        } else {\r\n          useNativePlayer.value = true\r\n        }\r\n      }, 300)\r\n    }\r\n    // #endif\r\n    \r\n    // #ifndef H5\r\n    useNativePlayer.value = true\r\n    // #endif\r\n  }\r\n})\r\n\r\nonMounted(() => {\r\n  // #ifdef H5\r\n  // H5 环境才使用 flv.js\r\n  if (isFlv(props.src)) {\r\n    // 延迟初始化，确保 DOM 已经渲染\r\n    setTimeout(() => {\r\n      initFlvPlayer()\r\n    }, 500)\r\n  } else {\r\n    useNativePlayer.value = true\r\n  }\r\n  // #endif\r\n  \r\n  // #ifndef H5\r\n  // 非 H5 环境使用原生播放器\r\n  useNativePlayer.value = true\r\n  // #endif\r\n})\r\n\r\nonBeforeUnmount(() => {\r\n  destroyPlayer()\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.flv-player-container {\r\n  width: 100%;\r\n  position: relative;\r\n  background: #000;\r\n}\r\n\r\n.flv-video-wrapper {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 420rpx;\r\n}\r\n\r\n.flv-video {\r\n  width: 100%;\r\n  height: 420rpx;\r\n  display: block;\r\n  background: #000;\r\n}\r\n\r\n.error-overlay {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background: rgba(0, 0, 0, 0.8);\r\n  gap: 20rpx;\r\n  padding: 40rpx;\r\n  z-index: 10;\r\n\r\n  .error-icon {\r\n    font-size: 60rpx;\r\n  }\r\n\r\n  .error-text {\r\n    font-size: 24rpx;\r\n    color: #fff;\r\n    text-align: center;\r\n    line-height: 1.5;\r\n  }\r\n\r\n  .retry-btn {\r\n    margin-top: 20rpx;\r\n    padding: 12rpx 32rpx;\r\n    background: #ff5722;\r\n    color: #fff;\r\n    border: none;\r\n    border-radius: 30rpx;\r\n    font-size: 24rpx;\r\n  }\r\n}\r\n\r\n.loading-overlay {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background: rgba(0, 0, 0, 0.7);\r\n  gap: 20rpx;\r\n  z-index: 5;\r\n\r\n  .loading-icon {\r\n    font-size: 60rpx;\r\n    animation: spin 1.5s linear infinite;\r\n  }\r\n\r\n  .loading-text {\r\n    font-size: 24rpx;\r\n    color: #fff;\r\n    text-align: center;\r\n  }\r\n}\r\n\r\n@keyframes spin {\r\n  from {\r\n    transform: rotate(0deg);\r\n  }\r\n  to {\r\n    transform: rotate(360deg);\r\n  }\r\n}\r\n</style>\r\n\r\n","import Component from 'D:/WORKPLACE/uu-company/components/common/FlvPlayer.vue'\nwx.createComponent(Component)"],"names":["ref","watch","onMounted","onBeforeUnmount"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AA2CA,UAAM,QAAQ;AAmBd,UAAM,OAAO;AAEKA,kBAAG,IAAC,IAAI;AAC1B,UAAM,QAAQA,cAAG,IAAC,EAAE;AACJA,kBAAG,IAAC,KAAK;AACzB,UAAM,kBAAkBA,cAAG,IAAC,KAAK;AA+RjC,UAAM,cAAc,CAAC,MAAM;AACzB,YAAM,QAAQ;AACd,WAAK,SAAS,CAAC;AAAA,IACjB;AAGA,UAAM,aAAa,MAAM;AACvB,WAAK,MAAM;AAAA,IACb;AAGAC,kBAAK,MAAC,MAAM,MAAM,KAAK,CAAC,QAAQ,WAAW;AACzC,UAAI,WAAW,QAAQ;AAErB,cAAM,QAAQ;AAiBd,wBAAgB,QAAQ;AAAA,MAEzB;AAAA,IACH,CAAC;AAEDC,kBAAAA,UAAU,MAAM;AAed,sBAAgB,QAAQ;AAAA,IAE1B,CAAC;AAEDC,kBAAAA,gBAAgB,MAAM;AAAA,IAEtB,CAAC;;;;;;;;;;;;;;;;AC1ZD,GAAG,gBAAgB,SAAS;"}